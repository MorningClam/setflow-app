// Firestore Security Rules for Setflow App
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuthed() {
      return request.auth != null;
    }

    function isOwner(uid) {
      return isAuthed() && request.auth.uid == uid;
    }

    // Function to check if the user is a participant in a conversation
    // Assumes conversation doc ID is 'userId1_userId2' sorted, or has a participants array
    function isParticipant(conversationDoc) {
      // Check based on document ID format (adjust if your format differs)
      // let parts = conversationDoc.id.split('_');
      // return isAuthed() && (request.auth.uid == parts[0] || request.auth.uid == parts[1]);
      // OR check based on participants array (safer if ID format changes)
      return isAuthed() && request.auth.uid in conversationDoc.data.participants;
    }

    // Function to check if the user is a member of a specific band
    function isBandMember(bandId) {
      // Check the user's document for band membership
      return isAuthed() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.bands[bandId] != null;
    }
    // Function to check if the user is an admin of a specific band
    function isBandAdmin(bandId) {
      // Check the user's document for band admin role
      return isAuthed() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.bands[bandId] == 'admin';
    }


    // --- Collection Rules ---

    // Users: Only the owner can read/write their own user document.
    match /users/{userId} {
      allow read, update, delete: if isOwner(userId);
      // Allow creation during signup (handled by backend/client SDK auth)
      allow create: if isAuthed(); // Or tighten if create happens differently
    }

    // Bands: Members can read, Admins can update/delete. Creation handled by API.
    match /bands/{bandId} {
      allow read: if isBandMember(bandId);
      allow update, delete: if isBandAdmin(bandId);
      // Creation might happen via function or client - adjust if needed
      allow create: if isAuthed(); // Allow any logged-in user to create for now
    }

    // Invitations: Only created by Band Admins (handled via API/function logic). No direct client read/write needed typically.
    match /invitations/{inviteId} {
      allow read, write: if false; // Tightly controlled, perhaps via cloud functions later
      allow create: if isAuthed(); // Simplified: Allow authed user to create (admin check ideally in function)
    }

    // Gigs: Any authenticated user can read. Owner (venue/promoter) can create/update/delete.
    match /gigs/{gigId} {
      allow read: if isAuthed();
      allow create: if isAuthed(); // User ID checked against resource.data.ownerId on write
      allow update, delete: if isAuthed() && resource.data.ownerId == request.auth.uid;
    }

    // Applications: Applicant creates. Applicant reads own. Gig owner reads applications for their gig.
    match /applications/{appId} {
      allow read: if isAuthed() && (resource.data.userId == request.auth.uid ||
                    // Check if user owns the gig this applies to
                    get(/databases/$(database)/documents/gigs/$(resource.data.gigId)).data.ownerId == request.auth.uid);
      allow create: if isAuthed() && request.resource.data.userId == request.auth.uid; // Ensure user creates their own app
      // No updates/deletes for now
      allow update, delete: if false;
    }

    // Calendar Events: Owner read/write only.
    match /calendarEvents/{eventId} {
      allow read, write, delete: if isAuthed() && resource.data.userId == request.auth.uid;
      allow create: if isAuthed() && request.resource.data.userId == request.auth.uid;
    }

    // Gear Listings: Any authenticated user can read. Owner can create/update/delete.
    match /gear_listings/{listingId} {
      allow read: if isAuthed();
      allow create: if isAuthed() && request.resource.data.sellerId == request.auth.uid;
      allow update, delete: if isAuthed() && resource.data.sellerId == request.auth.uid;
    }

    // Player Posts: Any authenticated user can read. Owner can create/update/delete.
    match /player_posts/{postId} {
      allow read: if isAuthed();
      allow create: if isAuthed() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthed() && resource.data.userId == request.auth.uid;
    }

    // Reviews: Authenticated users create. Read access TBD (public? only subject?). Keep reads restricted for now.
    match /reviews/{reviewId} {
      allow read: if false; // Keep private for now
      allow create: if isAuthed() && request.resource.data.reviewerId == request.auth.uid;
      // No updates/deletes for now
      allow update, delete: if false;
    }

    // Jam Sessions: Authenticated users can read. Owner (host) can create/update/delete.
    match /jam_sessions/{sessionId} {
      allow read: if isAuthed();
      allow create: if isAuthed() && request.resource.data.hostId == request.auth.uid;
      allow update, delete: if isAuthed() && resource.data.hostId == request.auth.uid;
    }

    // Conversations: Participants can read/update (e.g., lastMessage). Creation handled by API.
    match /conversations/{convoId} {
      allow read, update: if isParticipant(get(/databases/$(database)/documents/conversations/$(convoId)));
      allow create: if isAuthed(); // Creation logic is complex, ensure participants match auth'd user
      // No deletes for now
      allow delete: if false;

      // Messages Subcollection: Participants can read/create. No updates/deletes.
      match /messages/{messageId} {
        allow read: if isParticipant(get(/databases/$(database)/documents/conversations/$(convoId)));
        allow create: if isParticipant(get(/databases/$(database)/documents/conversations/$(convoId))) && request.resource.data.senderId == request.auth.uid;
        allow update, delete: if false;
      }
    }

    // Join Requests: Requester creates. Band Admin reads/updates status.
    match /join_requests/{reqId} {
      allow read, update: if isBandAdmin(resource.data.bandId); // Only admin can read/update status
      allow create: if isAuthed() && request.resource.data.userId == request.auth.uid; // User creates own request
      // No deletes for now
      allow delete: if false;
    }

    // Reports: Authenticated users create. Read/update/delete restricted (for admins later).
    match /reports/{reportId} {
      allow read, update, delete: if false; // Admin only later
      allow create: if isAuthed() && request.resource.data.reporterId == request.auth.uid;
    }
  }
}